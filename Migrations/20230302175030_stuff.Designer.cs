// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Raindish.Data;

#nullable disable

namespace Raindish._01.Migrations
{
    [DbContext(typeof(SongContext))]
    [Migration("20230302175030_stuff")]
    partial class stuff
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GenreSong", b =>
                {
                    b.Property<int>("GenresID")
                        .HasColumnType("int");

                    b.Property<int>("SongsID")
                        .HasColumnType("int");

                    b.HasKey("GenresID", "SongsID");

                    b.HasIndex("SongsID");

                    b.ToTable("GenreSong");
                });

            modelBuilder.Entity("Raindish.Models.Contributor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ArtistName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Contributor", (string)null);
                });

            modelBuilder.Entity("Raindish.Models.Genre", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Genre", (string)null);
                });

            modelBuilder.Entity("Raindish.Models.Pedal", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Pedal", (string)null);
                });

            modelBuilder.Entity("Raindish.Models.Song", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("AudioFileURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Finished")
                        .HasColumnType("bit");

                    b.Property<string>("KeySignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldNames")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ProductionRecording")
                        .HasColumnType("bit");

                    b.Property<string>("TabsLyricsURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("WrittenOn")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("Song", (string)null);
                });

            modelBuilder.Entity("Raindish.Models.SongContributor", b =>
                {
                    b.Property<int>("SongID")
                        .HasColumnType("int");

                    b.Property<int>("ContributorID")
                        .HasColumnType("int");

                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.HasKey("SongID", "ContributorID");

                    b.HasIndex("ContributorID");

                    b.ToTable("SongContributors");
                });

            modelBuilder.Entity("Raindish.Models.SongPedal", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("AlternativeAudioURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AlternativeTabURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PedalID")
                        .HasColumnType("int");

                    b.Property<int>("SongID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PedalID");

                    b.HasIndex("SongID");

                    b.ToTable("SongPedal", (string)null);
                });

            modelBuilder.Entity("Raindish.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("GenreSong", b =>
                {
                    b.HasOne("Raindish.Models.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raindish.Models.Song", null)
                        .WithMany()
                        .HasForeignKey("SongsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Raindish.Models.Song", b =>
                {
                    b.HasOne("Raindish.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Raindish.Models.SongContributor", b =>
                {
                    b.HasOne("Raindish.Models.Contributor", "Contributor")
                        .WithMany("SongContributors")
                        .HasForeignKey("ContributorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raindish.Models.Song", "Song")
                        .WithMany("SongContributors")
                        .HasForeignKey("SongID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contributor");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("Raindish.Models.SongPedal", b =>
                {
                    b.HasOne("Raindish.Models.Pedal", "Pedal")
                        .WithMany("SongPedals")
                        .HasForeignKey("PedalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raindish.Models.Song", "Song")
                        .WithMany("SongPedals")
                        .HasForeignKey("SongID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pedal");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("Raindish.Models.Contributor", b =>
                {
                    b.Navigation("SongContributors");
                });

            modelBuilder.Entity("Raindish.Models.Pedal", b =>
                {
                    b.Navigation("SongPedals");
                });

            modelBuilder.Entity("Raindish.Models.Song", b =>
                {
                    b.Navigation("SongContributors");

                    b.Navigation("SongPedals");
                });
#pragma warning restore 612, 618
        }
    }
}
